package define;

public class PolyphoandAbstract {
   /*
    ** 다형성(polymorphism)구현 
        1. Protoss, Zerg, Terran 클래스를 생성해서 공격하는 메소드를 구현 
        2. 실행을 위한 MainClass를 생성해서 3개의 메소드 호출 	
        3. 이 프로그램은 3개의 클래스가 동일한 작업을 수행하는데 메소드 이름이 전부 다릅니다. 
             동일한 작업을 하기 위해서 서로 다른 메소드 3개를 호출해야 합니다.
             동일한 또는 유사한 작업을 하는 메소드의 이름은 동일하게 작성하는 것이 프로그래밍하기 편리합니다. 
          - 이런 작업은 보통은 인터페이스를 만들어서 해결하고 지금처럼 인터페이스 작업을 하지 않았다면 실행 클래스를 
             만들기 이전에 확인해서 수정 
             
        4. Protoss, Zerg,Terran 클래스의 공격을 attack로 수정 (통일) Main 수정 
        
        - 유사한 작업을 수행하는 메소드 이름을 전부 동일하게 만들어서 코드를 읽기 좋게 만들었습니다. 
           만일 위 3개의 메소드에 유저 인터페이스를 연결한다면 코드가 전부 다르기 때문에 3개의 다른 이벤트가 필요합니다 
           스마트폰 애플리케이션은 이벤트의 개수가 적기 때문에 위처럼 작성하면 이벤트 연결부분이 어려워 집니다. 
           어짜피 위의 경우처럼 어느 한 순간에 하나의 메소드만 사용한다면 상속(inheritance - is a관계)과 메소드 재정의 
           (Overriding) 를 이용해서 동일한 코드가 대입된 객체에 따라서 다른 메소드를 호출할 수 있도록 만들어 줍니다. 
           
           5. 위 3개의 클래스의 객체를 하나의 변수에 저장할 수 있도록 star라는 상위 클래스를 생성 
           
           6. Protoss, Zerg,Teran클래스를 Star클래스로부터 상속받도록 만듭니다. 
             상속을 할 때는 클래스 이름뒤에 extends상위클래스 이름의 형태로 작성하면 됩니다. 
             
           7. Main클래스의 main메소드 내용을 수정 
           - !! 상위클래스의 참조형 변수에 하위클래스의 객체참조를 대입할 수 있다. !1
             참조형 변수가 주어지면 이 변수에는 자신의 자료형 뿐 아니라 하위클래스의 객체의 참조도 대입할 수 있습니다. 
           - 참조형 뱐수가 호출할 수 있는 이름들은 변수가 선언될때 사용된 자료형의 것들입니다.
	           s는 star가 소유한 것만 호출할 수 있습니다.
	           attack을 호출하려면 Star클래스에 attack을 만들어주어야 합니다.
	           상위클래스와 하위클래스에 동일한 메소드가 존재하는 것을 overriding(재정의)라고 합니다.
	           overriding된 메소드는 변수를 선언할 떄 사용한 자료형의 것을 호출하는 것이 아니고 = 으로 대입된 객체의 것을
	           호출합니다. 
          
          8. Star클래스에 attack()이라는 메소드를 생성 
             - Main에있는 s.attack()이라는 코드가 대입된 객체에 따라 다른 메소드를 호출합니다.
               인터페이스를 연결할 때 하나의 이벤트만 있으면 됩니다. 
               
       ** abstract(추상)
          1. abstract class: 자신의 객체를 생성하지 못하는 클래스 
             new 를 이용해서 생성자를 호출하지 못하는 클래스 
             이 클래스는 작업을 하기 위해 생성한 것이 아니라 다형성을 구현하기 위해서 만들어진 클래스
             실제 객체를 만들 필요가 없는 클래스, 상속을 통해서만 사용하는 클래스  
            - 우리가 만든 Star클래스는 게임을 하기 위해서 만든 클래스가 아니고 Protoss, zerg, Terran클래스의 객체를 하나의 변수에
              대입하기 위해서(상속관계를 만들기 위해서)생성한 클래스 이므로 자신의 객체를 만들 필요가 없습니다.
              이런 경우에 abstract(추상) class를 만들면 됩니다. 
            - class예약어 앞에 abstract를 붙이면 됩니다. 
            
          2. Main 클래스의 main메소드에 작성해서 테스트 
              Super class앞에 abstract를 추가하면 에러 
              
          3. abstract클래스는 객체를 생성하지 못하는 것이지 변수를 못 만드는 것은 아닙니다. 
          
          4. abstract method 
            - 추상 메소드는 내용이 없는 메소드 
            - !!이 메소드는 하위클래스에서 반드시 구현(Overriding)해야 합니다. !!
            - 이 메소드는abstract class나 interface에만 존재해야 합니다.
              일반 클래스에 존재하면 에러 
            - 생성방법 
              접근지정자 abstract 결과형 메소드이름(매개변수);
          
          5. Civil클래스에 있는 attack이라는 메소드는 오버라이딩을 위해서 만든 메소드 입니다.
             이 메소드는 호출할 필요가 없기 때문에 추상메소드로 만드는 것이 좋습니다. 
            Civil클래스에 있느 attack()메소드 수정 
            abstract public void attack(); 
          
         6. 추상 클래스를 만드는 것은 쉬운일이 아니기 때문에 지금은 abstract class가 있으면 이클래스는
            객체를 생성할 수 없기 떄문에 변수를 만드는 용도나 상속을 통해서 사용해야 합니다. 
            다른 클래스를 상속받을 때 그 클래스에  abstract method가 있다면 반드시 overriding해주어야 합니다. 
            
  
            
        
        
    */
}
